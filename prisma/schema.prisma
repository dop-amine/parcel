// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  passwordHash   String
  name           String
  profilePicture String?
  type           UserType  @default(ARTIST)
  tier           UserTier?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  bio            String?
  isActive       Boolean   @default(true)
  lastLogin      DateTime?
  socialLinks    Json?
  company        String?
  location       String?

  uploadLimit      Int?
  uploadsThisMonth Int       @default(0)
  lastUploadReset  DateTime?

  accounts       Account[]
  sessions       Session[]
  tracks         Track[]
  artistThreads  MessageThread[] @relation("ArtistThreads")
  execThreads    MessageThread[] @relation("ExecThreads")
  messages       Message[]
  purchases      Purchase[]
  dealsAsArtist  Deal[]    @relation("ArtistDeals")
  dealsAsExec    Deal[]    @relation("ExecDeals")
  dealsAsRep     Deal[]    @relation("RepDeals")
  playlistShares PlaylistShare[] @relation("RepShares")
  execContacts   ExecContact[] @relation("RepContacts")
  chatMessages   ChatMessage[]
  likes          Like[]
  playlists      Playlist[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Track {
  id          String    @id @default(cuid())
  title       String
  description String?
  audioUrl    String
  coverUrl    String?
  bpm         Int?
  duration    Float
  genres      String[]
  moods       String[]
  waveformUrl String?
  waveformData Float[]
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  artistTier  UserTier?

  // Basic Song Info (existing + new)
  isrcCode    String?   // ISRC Code
  iswcCode    String?   // ISWC Code

  // Ownership & Rights
  ownsFullRights Boolean @default(true) // Owns 100% of Master and Publishing
  masterOwners   Json?   // Array of {name, email, percentage}
  publishingOwners Json? // Array of {name, email, percentage}
  songwriters     Json?   // Array of {name, email, role}

  // Sync Licensing Preferences
  minimumSyncFee  Float?   // Minimum sync fee in USD
  allowedMediaTypes String[] // Array of allowed media types
  licenseType     String?   // Exclusive or Non-exclusive
  canBeModified   Boolean @default(false) // Can this track be modified
  disallowedUses  String?   // Freeform text for disallowed uses

  // Revenue & Payment Info
  royaltyCollectionEntity String? // Songtrust, CD Baby Pro, etc.
  splitConfirmation Boolean @default(false) // Confirmation that splits are correct

  // Pricing - New approach
  trackPricing TrackPricing[] // Separate table for efficient querying

  plays       Play[]
  earnings    Earning[]
  messageThreads MessageThread[]
  purchases   Purchase[]
  messages    Message[]
  deals       Deal[]
  basePrice   Float?   // Legacy field - to be deprecated
  isNegotiable Boolean @default(false) // Legacy field - to be deprecated
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  likes       Like[]
  playlistTracks PlaylistTrack[]

  @@index([userId])
  @@index([artistTier])
}

// New table for efficient pricing queries
model TrackPricing {
  id              String   @id @default(cuid())
  trackId         String
  track           Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  mediaTypeId     String   // 'film', 'tv', 'youtube', etc.
  mediaTypeCategory String // 'traditional' or 'digital'

  // Pricing structure
  basePrice       Float    // Hidden from buyers, used for negotiations
  buyoutPrice     Float?   // Optional, visible to buyers for instant purchase

  // Derived fields for efficient querying
  hasInstantBuy   Boolean  @default(false) // buyoutPrice IS NOT NULL
  lowestPrice     Float    // MIN(basePrice, buyoutPrice) for sorting

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([trackId])
  @@index([mediaTypeId])
  @@index([mediaTypeCategory])
  @@index([hasInstantBuy])
  @@index([lowestPrice])
  @@index([buyoutPrice])
  @@unique([trackId, mediaTypeId])
}

model Play {
  id        String   @id @default(cuid())
  trackId   String
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Earning {
  id        String   @id @default(cuid())
  amount    Float
  trackId   String
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model MessageThread {
  id        String    @id @default(cuid())
  artistId  String
  execId    String
  trackId   String
  artist    User      @relation("ArtistThreads", fields: [artistId], references: [id])
  exec      User      @relation("ExecThreads", fields: [execId], references: [id])
  track     Track     @relation(fields: [trackId], references: [id])
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id              String   @id @default(cuid())
  content         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  messageThreadId String
  messageThread   MessageThread @relation(fields: [messageThreadId], references: [id])
  trackId         String?
  track           Track?   @relation(fields: [trackId], references: [id])
}

model Purchase {
  id        String   @id @default(cuid())
  trackId   String
  execId    String
  price     Float
  track     Track    @relation(fields: [trackId], references: [id])
  exec      User     @relation(fields: [execId], references: [id])
  createdAt DateTime @default(now())
}

model Deal {
  id          String   @id @default(cuid())
  state       String   @default("PENDING")
  terms       Json
  createdById String
  createdByRole String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  trackId     String
  artistId    String
  execId      String?  // Nullable for external execs without accounts
  execEmail   String?  // For external execs without accounts
  repId       String?  // REP who initiated this deal
  rep         User?    @relation("RepDeals", fields: [repId], references: [id])
  track       Track    @relation(fields: [trackId], references: [id])
  artist      User     @relation("ArtistDeals", fields: [artistId], references: [id])
  exec        User?    @relation("ExecDeals", fields: [execId], references: [id])
  history     DealHistory[]
  chatMessages ChatMessage[]
  playlistShares PlaylistShare[]

  @@index([trackId])
  @@index([artistId])
  @@index([execId])
  @@index([repId])
  @@index([state])
}

model DealHistory {
  id            String   @id @default(cuid())
  dealId        String
  userId        String
  userRole      String
  action        String
  previousState String
  newState      String
  changes       Json
  timestamp     DateTime @default(now())
  deal          Deal     @relation(fields: [dealId], references: [id])

  @@index([dealId])
  @@index([userId])
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  dealId    String
  userId    String
  createdAt DateTime @default(now())
  deal      Deal     @relation(fields: [dealId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([dealId])
  @@index([userId])
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  track     Track    @relation(fields: [trackId], references: [id])
  trackId   String
  createdAt DateTime @default(now())
  @@unique([userId, trackId])
}

model Playlist {
  id          String    @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  tracks      PlaylistTrack[]
  shares      PlaylistShare[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isPublic    Boolean   @default(false)
  coverUrl    String?

  @@index([userId])
}

model PlaylistTrack {
  id         String   @id @default(cuid())
  playlistId String
  trackId    String
  order      Int      // For custom ordering
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  track      Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([playlistId, trackId])
  @@index([playlistId])
  @@index([trackId])
}

model PlaylistShare {
  id         String   @id @default(cuid())
  playlistId String
  email      String
  shareToken String   @unique @default(cuid()) // Public access token
  repId      String?  // REP who created this share
  rep        User?    @relation("RepShares", fields: [repId], references: [id])
  dealId     String?  // Optional: links to deal if created
  deal       Deal?    @relation(fields: [dealId], references: [id])
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  viewedAt   DateTime?
  status     String   @default("PENDING") // PENDING, VIEWED, DEAL_CREATED, DEAL_COMPLETED

  @@index([playlistId])
  @@index([email])
  @@index([dealId])
  @@index([shareToken])
  @@index([repId])
}

model ExecContact {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  company   String?
  title     String?
  repId     String   // REP who added this contact
  rep       User     @relation("RepContacts", fields: [repId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastContactedAt DateTime?
  notes     String?

  @@index([repId])
  @@index([email])
  @@index([company])
}

enum UserType {
  ARTIST
  EXEC
  ADMIN
  REP
}

enum UserTier {
  ARTIST
  LABEL
  ROSTERED

  CREATOR
  STUDIO
  PRO
}
