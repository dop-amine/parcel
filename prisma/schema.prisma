// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  tracks        Track[]
  artistThreads MessageThread[] @relation("ArtistThreads")
  execThreads   MessageThread[] @relation("ExecThreads")
  messages      Message[]
  purchases     Purchase[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Track {
  id          String    @id @default(cuid())
  title       String
  description String?
  audioUrl    String
  coverUrl    String?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  plays       Play[]
  earnings    Earning[]
  messageThreads MessageThread[]
  purchases   Purchase[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Play {
  id        String   @id @default(cuid())
  trackId   String
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Earning {
  id        String   @id @default(cuid())
  amount    Float
  trackId   String
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model MessageThread {
  id        String    @id @default(cuid())
  artistId  String
  execId    String
  trackId   String
  artist    User      @relation("ArtistThreads", fields: [artistId], references: [id])
  exec      User      @relation("ExecThreads", fields: [execId], references: [id])
  track     Track     @relation(fields: [trackId], references: [id])
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        String       @id @default(cuid())
  content   String
  threadId  String
  thread    MessageThread @relation(fields: [threadId], references: [id])
  senderId  String
  sender    User         @relation(fields: [senderId], references: [id])
  createdAt DateTime     @default(now())
}

model Purchase {
  id        String   @id @default(cuid())
  trackId   String
  execId    String
  price     Float
  track     Track    @relation(fields: [trackId], references: [id])
  exec      User     @relation(fields: [execId], references: [id])
  createdAt DateTime @default(now())
}
